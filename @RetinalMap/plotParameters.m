% Dumps all the paramters to a figure

function fig = plotParameters(obj,fontsize)

  if(obj.plotFigures == 0)
    disp('plotParameters: plotFigures = 0, hiding figures!')
    visFlag = 'off';
  else
    visFlag = 'on';
  end
  
  fig = figure('visible',visFlag);
  
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
  textStr{1} = sprintf('%s', obj.simName);

  textStr{end+1} = sprintf('Time stamps: Run: %s Analysis: %s (ID %.0f)\n', ...
                           datestr(obj.timeStamp,'yyyy-mm-dd HH:MM'), ...
                           datestr(now(),'yyyy-mm-dd HH:MM'), ...
                           obj.simID);
  
  
  textStr{end+1} = sprintf('iter = %d   t = %.1f   nRGC = %d   nSC = %d',...
                           obj.curStep, obj.time, obj.nRGC, obj.nSC);
                           
  try
    textStr{end+1} = sprintf(['phenotype = %s   eyeType = %s   RGCdensity = %s  dMinPacking = %.3f'], ... 
                             obj.phenotype, obj.eyeType, obj.RGCdensity, ...
                             obj.dMinPackingFactor);
  catch e
    % Old version did not have dMinPackingFactor
    textStr{end+1} = sprintf(['phenotype = %s   eyeType = %s   RGCdensity = %s'], ... 
                             obj.phenotype, obj.eyeType, obj.RGCdensity);
  
  end
    
    
   textStr{end+1} = sprintf(['useLocalJumps = %d   RGCwidth = %.2f   ' ...
                            'RGCmlSpread = %.2f\nnInitSynapses = %.0f   ' ...
                            'maxConnections = %.0f\n'], ...
                           obj.useLocalJumps, obj.RGCwidth, obj.RGCmlSpread, ...
                           obj.nInitSynapses, obj.maxConnections);
                               
  switch(obj.typeFlag)
    case 1 % Forward only
  
      textStr{end+1} = sprintf(['typeFlag = %d (forward)   kMask = %d\n' ...
                                'alphaForwardChem = %.0f   betaForwardChem = %.0f'], ...
                               obj.typeFlag, obj.kMask, ...
                               obj.alphaForwardChem, obj.betaForwardChem);
      
    case 2 % Forward and reverse
      
      textStr{end+1} = sprintf(['typeFlag = %d (forward and reverse)   kMask = %d'], ...
                               obj.typeFlag, obj.kMask);
      textStr{end+1} = sprintf(['alphaForwardChem = %.0f   betaForwardChem = %.0f   ' ...
                                '\nalphaReverseChem = %.0f   betaReverseChem = %.0f'], ...
                               obj.alphaForwardChem, obj.betaForwardChem, ...
                               obj.alphaReverseChem, obj.betaReverseChem);
            
    case 3 % Servo

      textStr{end+1} = sprintf(['typeFlag = %d (servo)   kMask = %d' ...
                                'alphaServoChem = %.0f   betaServoChem = %.0f'], ...
                               obj.typeFlag, obj.kMask, ...
                               obj.alphaServoChem, obj.betaServoChem);
      
    case 4 % Chemical reaction scheme

      textStr{end+1} = sprintf(['typeFlag = %d (chemical reactions)   ' ...
                                'kMask = %d (should be 0)   ' ...
                                'gridMaxChem = %.2f   nGridChem = %.0f'], ...
                               obj.typeFlag, obj.kMask, ...
                               obj.gridMachChem, obj.nGridChem);
      textStr{end+1} = sprintf(['alphaForwardChem = %.0f   betaForwardChem = %.0f   ' ...
                                'alphaReverseChem = %.0f   betaReverseChem = %.0f'], ...
                               obj.alphaForwardChem, obj.betaForwardChem, ...
                               obj.alphaReverseChem, obj.betaReverseChem);
      textStr{end+1} = sprintf(['KtfChem = %.1f   KtrChem = %.1f   ' ...
                                'KcaChem = %.1f   KcdChem = %.1f'], ...
                               obj.KtfChem, obj.KtrChem, obj.KcaChem, obj.KcdChem);
      
  end
  
  textStr{end+1} = sprintf(['RGCnoiseLevelN = %d   SCnoiseLevelN = %d\n', ...
                            'gradientGenerationMethod = %s\n'], ...                           
                           obj.RGCnoiseLevelN, obj.SCnoiseLevelN, ...
                           obj.gradientGenerationMethod);

  textStr{end+1} = sprintf(['AComp = %.0f   BComp = %.0f   DComp = %.0f   ' ...
                            'EComp = %.0f'], ... 
                           obj.AComp, obj.BComp, obj.DComp, ...
                           obj.EComp);
  
  textStr{end+1} = sprintf(['alphaComp = %.2f   betaComp = %.2f   '], ...
                           obj.alphaComp, obj.betaComp);
  
  textStr{end+1} = sprintf(['deltaComp = %.2f   epsilonComp = %.2f\n'], ...
                           obj.deltaComp, obj.epsilonComp);
                           
  textStr{end+1} = sprintf(['gammaAct = %.4f   aAct = %.3f   bAct = %.3f   ' ...
                            'actScaling = %d\n'], ...
                           obj.gammaAct, obj.aAct, obj.bAct, obj.actScaling);
  
  textStr{end+1} = sprintf(['total number of synapses = %.0f\n'], ...
                           sum(obj.totalWeightRGC));                           
  

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
  % a = annotation('textbox',[0.1 0.1 0.8 0.8],'String',textStr,'fontsize',6);  
  
  t = text(0.1,0.5,textStr);
  
  if(exist('fontsize'))
    set(t,'fontsize',fontsize)
  end
    
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
  axis off

end
